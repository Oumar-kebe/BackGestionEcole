<?php

namespace Database\Seeders;

use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use App\Models\Note;
use App\Models\Eleve;
use App\Models\Matiere;
use App\Models\Periode;
use App\Models\Enseignant;
use App\Models\Inscription;
use App\Models\AnneeScolaire;
use App\Models\Classe;

class NoteSeeder extends Seeder
{
    public function run()
    {
        $anneeCourante = AnneeScolaire::where('actuelle', true)->first();
        
        if (!$anneeCourante) {
            $this->command->error('Aucune ann√©e scolaire active trouv√©e');
            return;
        }

        // R√©cup√©rer toutes les donn√©es n√©cessaires
        $periodes = Periode::where('annee_scolaire_id', $anneeCourante->id)->get();
        $matieres = Matiere::where('actif', true)->get();
        $enseignants = Enseignant::with('user')->get();
        $classes = Classe::where('annee_scolaire_id', $anneeCourante->id)->get();

        if ($periodes->isEmpty() || $matieres->isEmpty() || $enseignants->isEmpty()) {
            $this->command->error('Donn√©es manquantes : p√©riodes, mati√®res ou enseignants');
            return;
        }

        $this->command->info('G√©n√©ration des notes pour ' . $classes->count() . ' classes...');

        foreach ($classes as $classe) {
            $this->command->info("Traitement de la classe : {$classe->nom}");
            
            // R√©cup√©rer les √©l√®ves de cette classe
            $inscriptions = Inscription::where('classe_id', $classe->id)
                ->where('annee_scolaire_id', $anneeCourante->id)
                ->where('statut', 'en_cours')
                ->with('eleve')
                ->get();

            if ($inscriptions->isEmpty()) {
                $this->command->warn("Aucun √©l√®ve dans la classe {$classe->nom}");
                continue;
            }

            // Pour chaque mati√®re
            foreach ($matieres as $matiere) {
                // S√©lectionner un enseignant au hasard pour cette mati√®re
                $enseignant = $enseignants->random();
                
                // Pour chaque p√©riode
                foreach ($periodes as $periode) {
                    // Skip les p√©riodes futures
                    if ($periode->date_debut > now()) {
                        continue;
                    }

                    // Pour chaque √©l√®ve
                    foreach ($inscriptions as $inscription) {
                        $eleve = $inscription->eleve;
                        
                        // V√©rifier si la note existe d√©j√†
                        $noteExistante = Note::where('eleve_id', $eleve->id)
                            ->where('matiere_id', $matiere->id)
                            ->where('periode_id', $periode->id)
                            ->first();

                        if ($noteExistante) {
                            continue; // Skip si la note existe d√©j√†
                        }

                        // G√©n√©rer les notes de fa√ßon r√©aliste
                        $noteData = $this->genererNotesRealistes();

                        Note::create([
                            'eleve_id' => $eleve->id,
                            'matiere_id' => $matiere->id,
                            'periode_id' => $periode->id,
                            'enseignant_id' => $enseignant->id,
                            'note_devoir1' => $noteData['devoir1'],
                            'note_devoir2' => $noteData['devoir2'],
                            'note_composition' => $noteData['composition'],
                            // La moyenne sera calcul√©e automatiquement par le mod√®le
                        ]);
                    }
                }
            }
        }

        $totalNotes = Note::count();
        $this->command->info("‚úÖ Seeder des notes termin√© ! {$totalNotes} notes g√©n√©r√©es au total.");
        
        // Afficher quelques statistiques
        $this->afficherStatistiquesNotes();
    }

    /**
     * G√©n√©rer des notes r√©alistes pour un √©l√®ve
     */
    private function genererNotesRealistes(): array
    {
        // D√©finir le niveau de l'√©l√®ve (influencera toutes ses notes)
        $niveauEleve = mt_rand(1, 100);
        
        if ($niveauEleve <= 5) {
            // √âl√®ve excellent (5%)
            $baseMin = 16;
            $baseMax = 20;
        } elseif ($niveauEleve <= 15) {
            // Tr√®s bon √©l√®ve (10%)
            $baseMin = 14;
            $baseMax = 18;
        } elseif ($niveauEleve <= 35) {
            // Bon √©l√®ve (20%)
            $baseMin = 12;
            $baseMax = 16;
        } elseif ($niveauEleve <= 60) {
            // √âl√®ve moyen (25%)
            $baseMin = 10;
            $baseMax = 14;
        } elseif ($niveauEleve <= 85) {
            // √âl√®ve faible (25%)
            $baseMin = 8;
            $baseMax = 12;
        } else {
            // √âl√®ve en grande difficult√© (15%)
            $baseMin = 4;
            $baseMax = 10;
        }

        // G√©n√©rer les notes avec une petite variation
        $devoir1 = $this->genererNote($baseMin, $baseMax, 1.5); // Plus de variation pour les devoirs
        $devoir2 = $this->genererNote($baseMin, $baseMax, 1.5);
        $composition = $this->genererNote($baseMin, $baseMax, 1.0); // Moins de variation pour la composition
        
        return [
            'devoir1' => $devoir1,
            'devoir2' => $devoir2,
            'composition' => $composition
        ];
    }

    /**
     * G√©n√©rer une note dans une plage avec variation
     */
    private function genererNote(float $min, float $max, float $variation = 1.0): float
    {
        $base = mt_rand($min * 100, $max * 100) / 100;
        $variationValue = (mt_rand(-100, 100) / 100) * $variation;
        $note = $base + $variationValue;
        
        // S'assurer que la note reste dans la plage 0-20
        return max(0, min(20, round($note, 2)));
    }

    /**
     * Afficher des statistiques sur les notes g√©n√©r√©es
     */
    private function afficherStatistiquesNotes()
    {
        $this->command->info("\nüìä STATISTIQUES DES NOTES G√âN√âR√âES :");
        
        $moyenneGenerale = round(Note::avg('moyenne'), 2);
        $this->command->info("üìà Moyenne g√©n√©rale de toutes les notes: {$moyenneGenerale}/20");
        
        $meilleureNote = Note::max('moyenne');
        $moinsBonneNote = Note::min('moyenne');
        $this->command->info("üìä Meilleure moyenne: {$meilleureNote}/20");
        $this->command->info("üìä Moins bonne moyenne: {$moinsBonneNote}/20");
        
        // R√©partition par appr√©ciation
        $appreciations = [
            'Excellent' => Note::where('appreciation', 'Excellent')->count(),
            'Tr√®s bien' => Note::where('appreciation', 'Tr√®s bien')->count(),
            'Bien' => Note::where('appreciation', 'Bien')->count(),
            'Assez bien' => Note::where('appreciation', 'Assez bien')->count(),
            'Passable' => Note::where('appreciation', 'Passable')->count(),
            'Insuffisant' => Note::where('appreciation', 'Insuffisant')->count(),
        ];

        $totalNotes = Note::count();
        $this->command->info("\nüìä R√âPARTITION PAR APPR√âCIATION :");
        foreach ($appreciations as $appreciation => $count) {
            $pourcentage = $count > 0 ? round(($count / $totalNotes) * 100, 1) : 0;
            $this->command->info("  {$appreciation}: {$count} notes ({$pourcentage}%)");
        }
    }
}
