<?php

namespace Database\Seeders;

use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use App\Models\Bulletin;
use App\Models\Eleve;
use App\Models\Classe;
use App\Models\Periode;
use App\Models\Note;
use App\Models\AnneeScolaire;
use App\Models\Inscription;
use Illuminate\Support\Facades\DB;

class BulletinSeeder extends Seeder
{
    public function run()
    {
        $anneeCourante = AnneeScolaire::where('actuelle', true)->first();
        
        if (!$anneeCourante) {
            $this->command->error('Aucune ann√©e scolaire active trouv√©e');
            return;
        }

        // R√©cup√©rer toutes les p√©riodes de l'ann√©e courante
        $periodes = Periode::where('annee_scolaire_id', $anneeCourante->id)
            ->orderBy('ordre')
            ->get();

        if ($periodes->isEmpty()) {
            $this->command->error('Aucune p√©riode trouv√©e pour l\'ann√©e scolaire courante');
            return;
        }

        // R√©cup√©rer toutes les classes de l'ann√©e courante
        $classes = Classe::where('annee_scolaire_id', $anneeCourante->id)->get();

        $this->command->info('G√©n√©ration des bulletins pour ' . $classes->count() . ' classes et ' . $periodes->count() . ' p√©riodes...');

        $observations = [
            '√âl√®ve s√©rieux et appliqu√©. Continue ainsi !',
            'Bon niveau g√©n√©ral. Peut faire mieux en math√©matiques.',
            'Excellente participation en classe. Tr√®s bon travail.',
            '√âl√®ve timide mais travailleur. Encouragez-le √† participer davantage.',
            'R√©sultats satisfaisants. Doit maintenir ses efforts.',
            'Tr√®s bonne √©l√®ve. F√©licitations !',
            'Quelques difficult√©s en sciences. Un soutien est recommand√©.',
            '√âl√®ve dynamique avec de bons r√©sultats.',
            'Progression notable ce trimestre. Continuez !',
            'Excellent comportement et tr√®s bons r√©sultats.',
            '√âl√®ve r√©gulier dans son travail.',
            'Doit redoubler d\'efforts pour le prochain trimestre.',
            'Tr√®s √† l\'√©coute en classe. Bon travail !',
            'R√©sultats en baisse. Vigilance n√©cessaire.',
            '√âl√®ve m√©ritant. F√©licitations du conseil de classe.'
        ];

        foreach ($classes as $classe) {
            $this->command->info("Traitement de la classe : {$classe->nom}");
            
            // R√©cup√©rer les √©l√®ves inscrits dans cette classe
            $inscriptions = Inscription::where('classe_id', $classe->id)
                ->where('annee_scolaire_id', $anneeCourante->id)
                ->where('statut', 'en_cours')
                ->with('eleve')
                ->get();

            $effectifClasse = $inscriptions->count();

            if ($effectifClasse === 0) {
                $this->command->warn("Aucun √©l√®ve inscrit dans la classe {$classe->nom}");
                continue;
            }

            foreach ($periodes as $periode) {
                $this->command->info("  - P√©riode : {$periode->nom}");
                
                $bulletinsData = [];

                // Calculer les moyennes pour tous les √©l√®ves de la classe pour cette p√©riode
                foreach ($inscriptions as $inscription) {
                    $eleve = $inscription->eleve;
                    
                    // R√©cup√©rer toutes les notes de l'√©l√®ve pour cette p√©riode
                    $notes = Note::where('eleve_id', $eleve->id)
                        ->where('periode_id', $periode->id)
                        ->whereNotNull('moyenne')
                        ->get();

                    if ($notes->isNotEmpty()) {
                        // Calculer la moyenne g√©n√©rale √† partir des notes existantes
                        $moyenneGenerale = $notes->avg('moyenne');
                        $this->command->info("    ‚Üí √âl√®ve {$eleve->user->prenom} {$eleve->user->nom}: moyenne calcul√©e √† partir de {$notes->count()} notes = {$moyenneGenerale}");
                    } else {
                        // Si pas de notes, cr√©er une moyenne fictive pour le test
                        $moyenneGenerale = $this->genererMoyenneFictive();
                        $this->command->warn("    ‚Üí √âl√®ve {$eleve->user->prenom} {$eleve->user->nom}: aucune note trouv√©e, moyenne fictive = {$moyenneGenerale}");
                    }

                    $bulletinsData[] = [
                        'eleve_id' => $eleve->id,
                        'eleve' => $eleve,
                        'moyenne_generale' => round($moyenneGenerale, 2)
                    ];
                }

                // Trier par moyenne d√©croissante pour calculer les rangs
                usort($bulletinsData, function($a, $b) {
                    return $b['moyenne_generale'] <=> $a['moyenne_generale'];
                });

                // Cr√©er les bulletins avec les rangs
                foreach ($bulletinsData as $index => $bulletinData) {
                    $bulletin = new Bulletin();
                    $bulletin->eleve_id = $bulletinData['eleve_id'];
                    $bulletin->classe_id = $classe->id;
                    $bulletin->periode_id = $periode->id;
                    $bulletin->moyenne_generale = $bulletinData['moyenne_generale'];
                    $bulletin->rang = $index + 1;
                    $bulletin->effectif_classe = $effectifClasse;
                    $bulletin->observation_conseil = $observations[array_rand($observations)];
                    $bulletin->genere_le = now();
                    
                    // G√©n√©rer la mention automatiquement
                    $bulletin->genererMention();
                    
                    $bulletin->save();
                }

                $this->command->info("    ‚Üí {$effectifClasse} bulletins g√©n√©r√©s pour {$periode->nom}");
            }
        }

        $totalBulletins = Bulletin::count();
        $this->command->info("‚úÖ Seeder termin√© ! {$totalBulletins} bulletins g√©n√©r√©s au total.");

        // Afficher quelques statistiques
        $this->afficherStatistiques();
    }

    /**
     * G√©n√©rer une moyenne fictive r√©aliste
     */
    private function genererMoyenneFictive(): float
    {
        // G√©n√©rer des moyennes selon une distribution r√©aliste
        $rand = mt_rand(1, 100);
        
        if ($rand <= 5) {
            // 5% d'excellents √©l√®ves (17-20)
            return mt_rand(1700, 2000) / 100;
        } elseif ($rand <= 15) {
            // 10% de tr√®s bons √©l√®ves (15-16.99)
            return mt_rand(1500, 1699) / 100;
        } elseif ($rand <= 35) {
            // 20% de bons √©l√®ves (13-14.99)
            return mt_rand(1300, 1499) / 100;
        } elseif ($rand <= 60) {
            // 25% d'√©l√®ves moyens (11-12.99)
            return mt_rand(1100, 1299) / 100;
        } elseif ($rand <= 85) {
            // 25% d'√©l√®ves passables (10-10.99)
            return mt_rand(1000, 1099) / 100;
        } else {
            // 15% d'√©l√®ves en difficult√© (5-9.99)
            return mt_rand(500, 999) / 100;
        }
    }

    /**
     * Afficher des statistiques sur les bulletins g√©n√©r√©s
     */
    private function afficherStatistiques()
    {
        $this->command->info("\nüìä STATISTIQUES DES BULLETINS G√âN√âR√âS :");
        
        $mentions = [
            'excellent' => 'Excellent',
            'tres_bien' => 'Tr√®s bien', 
            'bien' => 'Bien',
            'assez_bien' => 'Assez bien',
            'passable' => 'Passable',
            'insuffisant' => 'Insuffisant'
        ];

        foreach ($mentions as $mention => $label) {
            $count = Bulletin::where('mention', $mention)->count();
            $pourcentage = $count > 0 ? round(($count / Bulletin::count()) * 100, 1) : 0;
            $this->command->info("  {$label}: {$count} bulletins ({$pourcentage}%)");
        }

        $moyenneGenerale = round(Bulletin::avg('moyenne_generale'), 2);
        $this->command->info("\nüìà Moyenne g√©n√©rale de tous les bulletins: {$moyenneGenerale}/20");
        
        $meilleureNote = Bulletin::max('moyenne_generale');
        $moinsBonneNote = Bulletin::min('moyenne_generale');
        $this->command->info("üìä Note la plus haute: {$meilleureNote}/20");
        $this->command->info("üìä Note la plus basse: {$moinsBonneNote}/20");
    }
}
